// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.sirh.eae.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.sirh.eae.domain.EaeFdpActivite;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EaeFdpActivite_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "eaePersistenceUnit")
    transient EntityManager EaeFdpActivite.entityManager;
    
    public static final List<String> EaeFdpActivite.fieldNames4OrderClauseFilter = java.util.Arrays.asList("libelle", "eaeFichePoste");
    
    public static final EntityManager EaeFdpActivite.entityManager() {
        EntityManager em = new EaeFdpActivite().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long EaeFdpActivite.countEaeFdpActivites() {
        return entityManager().createQuery("SELECT COUNT(o) FROM EaeFdpActivite o", Long.class).getSingleResult();
    }
    
    public static List<EaeFdpActivite> EaeFdpActivite.findAllEaeFdpActivites() {
        return entityManager().createQuery("SELECT o FROM EaeFdpActivite o", EaeFdpActivite.class).getResultList();
    }
    
    public static List<EaeFdpActivite> EaeFdpActivite.findAllEaeFdpActivites(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM EaeFdpActivite o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, EaeFdpActivite.class).getResultList();
    }
    
    public static EaeFdpActivite EaeFdpActivite.findEaeFdpActivite(Integer idEaeFdpActivite) {
        if (idEaeFdpActivite == null) return null;
        return entityManager().find(EaeFdpActivite.class, idEaeFdpActivite);
    }
    
    public static List<EaeFdpActivite> EaeFdpActivite.findEaeFdpActiviteEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM EaeFdpActivite o", EaeFdpActivite.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<EaeFdpActivite> EaeFdpActivite.findEaeFdpActiviteEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM EaeFdpActivite o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, EaeFdpActivite.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void EaeFdpActivite.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void EaeFdpActivite.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            EaeFdpActivite attached = EaeFdpActivite.findEaeFdpActivite(this.idEaeFdpActivite);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void EaeFdpActivite.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void EaeFdpActivite.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public EaeFdpActivite EaeFdpActivite.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        EaeFdpActivite merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
