// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.sirh.eae.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.sirh.eae.domain.EaeFdpCompetence;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EaeFdpCompetence_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "eaePersistenceUnit")
    transient EntityManager EaeFdpCompetence.entityManager;
    
    public static final EntityManager EaeFdpCompetence.entityManager() {
        EntityManager em = new EaeFdpCompetence().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long EaeFdpCompetence.countEaeFdpCompetences() {
        return entityManager().createQuery("SELECT COUNT(o) FROM EaeFdpCompetence o", Long.class).getSingleResult();
    }
    
    public static List<EaeFdpCompetence> EaeFdpCompetence.findAllEaeFdpCompetences() {
        return entityManager().createQuery("SELECT o FROM EaeFdpCompetence o", EaeFdpCompetence.class).getResultList();
    }
    
    public static EaeFdpCompetence EaeFdpCompetence.findEaeFdpCompetence(Integer idEaeFdpCompetence) {
        if (idEaeFdpCompetence == null) return null;
        return entityManager().find(EaeFdpCompetence.class, idEaeFdpCompetence);
    }
    
    public static List<EaeFdpCompetence> EaeFdpCompetence.findEaeFdpCompetenceEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM EaeFdpCompetence o", EaeFdpCompetence.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void EaeFdpCompetence.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void EaeFdpCompetence.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            EaeFdpCompetence attached = EaeFdpCompetence.findEaeFdpCompetence(this.idEaeFdpCompetence);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void EaeFdpCompetence.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void EaeFdpCompetence.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public EaeFdpCompetence EaeFdpCompetence.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        EaeFdpCompetence merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
