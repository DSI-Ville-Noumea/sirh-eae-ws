// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.sirh.eae.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.sirh.eae.domain.Eae;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Eae_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "eaePersistenceUnit")
    transient EntityManager Eae.entityManager;
    
    public static final List<String> Eae.fieldNames4OrderClauseFilter = java.util.Arrays.asList("etat", "cap", "docAttache", "dateCreation", "dateFin", "dateEntretien", "dureeEntretienMinutes", "dateFinalisation", "dateControle", "heureControle", "userControle", "idAgentDelegataire", "eaeEvaluation", "commentaire", "eaeEvaluateurs", "eaeEvalue", "eaeFichePostes", "eaeDiplomes", "eaeParcoursPros", "eaeFormations", "eaeResultats", "eaePlanActions", "eaeAppreciations", "eaeAutoEvaluation", "eaeEvolution", "eaeCampagne", "eaeFinalisations", "agentDelegataire");
    
    public static final EntityManager Eae.entityManager() {
        EntityManager em = new Eae().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Eae.countEaes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Eae o", Long.class).getSingleResult();
    }
    
    public static List<Eae> Eae.findAllEaes() {
        return entityManager().createQuery("SELECT o FROM Eae o", Eae.class).getResultList();
    }
    
    public static List<Eae> Eae.findAllEaes(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Eae o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Eae.class).getResultList();
    }
    
    public static Eae Eae.findEae(Integer idEae) {
        if (idEae == null) return null;
        return entityManager().find(Eae.class, idEae);
    }
    
    public static List<Eae> Eae.findEaeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Eae o", Eae.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Eae> Eae.findEaeEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Eae o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Eae.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Eae.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Eae.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Eae attached = Eae.findEae(this.idEae);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Eae.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Eae.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Eae Eae.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Eae merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
