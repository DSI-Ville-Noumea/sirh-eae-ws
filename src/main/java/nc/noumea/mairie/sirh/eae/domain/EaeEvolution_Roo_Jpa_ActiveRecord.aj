// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nc.noumea.mairie.sirh.eae.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nc.noumea.mairie.sirh.eae.domain.EaeEvolution;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EaeEvolution_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "eaePersistenceUnit")
    transient EntityManager EaeEvolution.entityManager;
    
    public static final List<String> EaeEvolution.fieldNames4OrderClauseFilter = java.util.Arrays.asList("mobiliteGeo", "mobiliteFonctionnelle", "changementMetier", "delaiEnvisage", "mobiliteService", "mobiliteDirection", "mobiliteCollectivite", "nomCollectivite", "mobiliteAutre", "concours", "nomConcours", "vae", "nomVae", "tempsPartiel", "tempsPartielIdSpbhor", "retraite", "dateRetraite", "autrePerspective", "libelleAutrePerspective", "commentaireEvolution", "commentaireEvaluateur", "commentaireEvalue", "eaeEvolutionSouhaits", "eaeDeveloppements", "eae");
    
    public static final EntityManager EaeEvolution.entityManager() {
        EntityManager em = new EaeEvolution().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long EaeEvolution.countEaeEvolutions() {
        return entityManager().createQuery("SELECT COUNT(o) FROM EaeEvolution o", Long.class).getSingleResult();
    }
    
    public static List<EaeEvolution> EaeEvolution.findAllEaeEvolutions() {
        return entityManager().createQuery("SELECT o FROM EaeEvolution o", EaeEvolution.class).getResultList();
    }
    
    public static List<EaeEvolution> EaeEvolution.findAllEaeEvolutions(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM EaeEvolution o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, EaeEvolution.class).getResultList();
    }
    
    public static EaeEvolution EaeEvolution.findEaeEvolution(Integer idEaeEvolution) {
        if (idEaeEvolution == null) return null;
        return entityManager().find(EaeEvolution.class, idEaeEvolution);
    }
    
    public static List<EaeEvolution> EaeEvolution.findEaeEvolutionEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM EaeEvolution o", EaeEvolution.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<EaeEvolution> EaeEvolution.findEaeEvolutionEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM EaeEvolution o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, EaeEvolution.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void EaeEvolution.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void EaeEvolution.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            EaeEvolution attached = EaeEvolution.findEaeEvolution(this.idEaeEvolution);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void EaeEvolution.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void EaeEvolution.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public EaeEvolution EaeEvolution.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        EaeEvolution merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
